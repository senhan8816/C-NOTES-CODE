// 预处理指令
#include <iostream>
using namespace std;
int main() {
    // 解决中文乱码问题
    system("chcp 65001");

    // 静态内存分配： 变量，数组等对象的创建，是由C++自动分配内存。
    // 静态内存分配，是不会进行内存空间的自动清理，我们需要手动的管理内存，即手动分配，用完清理

    // 动态内存分配：由程序员手动的进行内存空间的分配，内存空间的释放等内存管理操作
    // 比如：
    int num = 10;
    int nums[] = {1,2,3,4,5};
    cout << num << endl; //这里使用了num，后续不用了
    cout << nums << endl; //这里使用了nums，后续不用了
    //假设这个程序要一直运行，程序到这里，num是和nums就不用了。在程序运行的期间，他们一直占用这内存空间

    // new 和 delete 运算符
    // new 运算符用于申请并分配内存空间。并提供指向该空间的指针
    // 语法：
    // new 数据类型 申请普通变量空间
    // new 数据类型[n] 申请数组空间
    // delete运算符用于释放内存，仅可用于new运算符申请的内存区域
    // 语法：
    // delete 指针 删除普通变量空间
    // delete[] 指针 删除数组空间

    int *p = new int; //申请4个字节的内存空间（因为是int）
    *p = 10;
    cout << *p << endl;
    delete p; //用完之后，释放之前申请的内存空间

    int *p1 = new int[5];
    //p[0]=1; //指针也可用下标， 等同于 *(p+0)
    *p1 = 1;
    *(p1+1) = 2;
    cout << *p1 << endl;
    cout << *(p1+1) << endl;
    delete[] p1;


    return 0;

}


